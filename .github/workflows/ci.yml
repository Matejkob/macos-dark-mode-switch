name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-15]
        xcode: ['16.4']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    - name: Install xcpretty
      run: gem install xcpretty
    
    - name: Build App (Debug)
      run: |
        xcodebuild -project DarkModeSwitch.xcodeproj \
          -scheme App \
          -configuration Debug \
          -derivedDataPath .build \
          CODE_SIGNING_ALLOWED=NO \
          build \
          | xcpretty
    
    - name: Run Unit Tests
      run: |
        xcodebuild -workspace DarkModeSwitch.xcworkspace \
          -scheme Tests \
          -testPlan UnitTests \
          -derivedDataPath .build \
          -enableCodeCoverage YES \
          CODE_SIGNING_ALLOWED=NO \
          test

    - name: Gather code coverage
      run: |
        # Find the test bundle executable
        TEST_BUNDLE_PATH=$(find .build -name "Tests.xctest" -type d | head -n 1)
        
        if [ -z "$TEST_BUNDLE_PATH" ]; then
          echo "Error: Could not find test bundle"
          exit 1
        fi
        
        # Get the executable name (macOS test bundles have the executable inside Contents/MacOS/)
        TEST_EXECUTABLE="$TEST_BUNDLE_PATH/Contents/MacOS/Tests"
        
        # Find the profdata file
        PROFDATA_PATH=$(find .build -name "default.profdata" -o -name "Coverage.profdata" | head -n 1)
        
        if [ -z "$PROFDATA_PATH" ]; then
          echo "Error: Could not find profdata file"
          exit 1
        fi
        
        echo "Test bundle: $TEST_BUNDLE_PATH"
        echo "Test executable: $TEST_EXECUTABLE"
        echo "Profile data: $PROFDATA_PATH"
        
        # Generate coverage report
        xcrun llvm-cov report \
          "$TEST_EXECUTABLE" \
          -instr-profile="$PROFDATA_PATH" \
          -ignore-filename-regex=".build|Tests|Packages/.*/Tests" \
          -use-color
        
        # Export to LCOV format
        xcrun llvm-cov export -format="lcov" \
          "$TEST_EXECUTABLE" \
          -instr-profile="$PROFDATA_PATH" \
          -ignore-filename-regex=".build|Tests|Packages/.*/Tests" \
          > coverage_report.lcov

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        slug: Matejkob/macos-dark-mode-switch
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage_report.lcov
        fail_ci_if_error: true
        verbose: true
    
  # lint:
  #   name: Swift Lint
  #   runs-on: macos-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Install SwiftLint
  #     run: brew install swiftlint
    
  #   - name: Run SwiftLint
  #     run: swiftlint lint --reporter github-actions-logging

  # check-format:
  #   name: Check Swift Format
  #   runs-on: macos-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Install swift-format
  #     run: brew install swift-format
    
  #   - name: Check formatting
  #     run: |
  #       swift-format lint --recursive \
  #         --parallel \
  #         --strict \
  #         App/ \
  #         LaunchAgent/ \
  #         Tests/ \
  #         Packages/