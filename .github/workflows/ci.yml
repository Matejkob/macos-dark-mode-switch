name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-15]
        xcode: ['16.4']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    # - name: Install xcpretty
    #   run: gem install xcpretty
    
    # - name: Build App (Debug)
    #   run: |
    #     xcodebuild -project DarkModeSwitch.xcodeproj \
    #       -scheme App \
    #       -configuration Debug \
    #       -derivedDataPath .build \
    #       CODE_SIGNING_ALLOWED=NO \
    #       build \
    #       | xcpretty
    
    - name: Run Unit Tests
      run: |
        xcodebuild -workspace DarkModeSwitch.xcworkspace \
          -scheme Tests \
          -testPlan UnitTests \
          -derivedDataPath .build \
          -enableCodeCoverage YES \
          CODE_SIGNING_ALLOWED=NO \
          test

    - name: Gather code coverage
      run: |
        # Find all test executables and binaries
        echo "=== Finding all executables and frameworks ==="
        find .build -name "*.xctest" -type d | while read -r bundle; do
          echo "Found test bundle: $bundle"
        done
        
        find .build -name "*.framework" -type d | while read -r framework; do
          echo "Found framework: $framework"
        done
        
        # Find the App executable (which contains the actual code)
        APP_EXECUTABLE=$(find .build -name "App.app" -type d | head -n 1)/Contents/MacOS/App
        
        if [ ! -f "$APP_EXECUTABLE" ]; then
          echo "Warning: Could not find App executable"
        else
          echo "Found App executable: $APP_EXECUTABLE"
        fi
        
        # Find all test bundles
        TEST_BUNDLES=$(find .build -name "*.xctest" -type d)
        
        # Find the profdata file
        PROFDATA_PATH=$(find .build -name "*.profdata" | head -n 1)
        
        if [ -z "$PROFDATA_PATH" ]; then
          echo "Error: Could not find profdata file"
          exit 1
        fi
        
        echo "=== Coverage gathering configuration ==="
        echo "Profile data: $PROFDATA_PATH"
        
        # Collect all executables for coverage
        ALL_EXECUTABLES=""
        
        # Add the App executable if it exists
        if [ -f "$APP_EXECUTABLE" ]; then
          ALL_EXECUTABLES="$APP_EXECUTABLE"
          echo "Using App executable: $APP_EXECUTABLE"
        fi
        
        # Add all test executables
        for bundle in $TEST_BUNDLES; do
          executable_name=$(basename "$bundle" .xctest)
          executable_path="$bundle/Contents/MacOS/$executable_name"
          
          if [ -f "$executable_path" ]; then
            if [ -z "$ALL_EXECUTABLES" ]; then
              ALL_EXECUTABLES="$executable_path"
            else
              ALL_EXECUTABLES="$ALL_EXECUTABLES -object $executable_path"
            fi
            echo "Added test executable: $executable_path"
          fi
        done
        
        # Generate coverage report
        echo "=== Generating coverage report ==="
        echo "Command: xcrun llvm-cov report $ALL_EXECUTABLES -instr-profile=\"$PROFDATA_PATH\""
        
        xcrun llvm-cov report \
          $ALL_EXECUTABLES \
          -instr-profile="$PROFDATA_PATH" \
          -ignore-filename-regex=".build|Tests" \
          -use-color
        
        # Export to LCOV format
        echo "=== Exporting to LCOV format ==="
        xcrun llvm-cov export -format="lcov" \
          $ALL_EXECUTABLES \
          -instr-profile="$PROFDATA_PATH" \
          -ignore-filename-regex=".build|Tests" \
          > coverage_report.lcov
        
        echo "=== Coverage report generated ==="
        echo "LCOV file size: $(wc -c < coverage_report.lcov) bytes"
        
        # Debug: Show first few lines of LCOV if not empty
        if [ -s coverage_report.lcov ]; then
          echo "First 10 lines of LCOV report:"
          head -n 10 coverage_report.lcov
        fi

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        slug: Matejkob/macos-dark-mode-switch
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage_report.lcov
        fail_ci_if_error: true
        verbose: true
    
  # lint:
  #   name: Swift Lint
  #   runs-on: macos-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Install SwiftLint
  #     run: brew install swiftlint
    
  #   - name: Run SwiftLint
  #     run: swiftlint lint --reporter github-actions-logging

  # check-format:
  #   name: Check Swift Format
  #   runs-on: macos-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Install swift-format
  #     run: brew install swift-format
    
  #   - name: Check formatting
  #     run: |
  #       swift-format lint --recursive \
  #         --parallel \
  #         --strict \
  #         App/ \
  #         LaunchAgent/ \
  #         Tests/ \
  #         Packages/